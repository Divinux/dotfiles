# bashrc from archinstall250
# General features
# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# History
# don't put duplicate lines or lines starting with space in the history.
export HISTCONTROL=ignoreboth
export HISTIGNORE=ls:ll:la:l:cd:pwd:exit:mc:su:df

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=
HISTFILESIZE=

export PROMPT_COMMAND="history -a; history -n; $PROMPT_COMMAND"

# Aliases
# Detect distribution and set alias for package updates
if [ -f /etc/arch-release ]; then
    # Arch
    alias u='sudo pacman -Syu'
    alias i='sudo pacman -S '
    alias f='pacman -Ss '
    alias r='sudo pacman -Rs '
    alias rr='sudo pacman -Rns '
    alias c='sudo pacman -Sc'
    alias y='yay -S '
    alias p='paru'
elif [ -f /etc/lsb-release ]; then
    # Debian
    alias u='sudo apt update && sudo apt upgrade'
    alias i='sudo apt install '
    alias f='apt search '
    alias r='sudo apt remove '
    alias rr='sudo apt purge '
    alias c='sudo apt autoremove && sudo apt clean'
else
    echo "Unsupported distribution or cannot detect distribution."
fi

alias ff='fastfetch'
alias h='history'
alias hg='history | grep '
alias con='lsof -i'

alias rss='cleed'
alias rsss='neix'

alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

alias pls='sudo $(history -p !!)'

# git
alias gs="git status"
alias ga='git add .'
alias gc='git commit -m "Add files"'
alias gp='git push origin main'
alias gstash="git stash"

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias showscheme='echo -e "${BBLACK}#${BRED}#${BGREEN}#${BYELLOW}#${BBLUE}#${BMAGENTA}#${BCYAN}#${BLGRAY}#\n${BGRAY}#${BLRED}#${BLGREEN}#${BLYELLOW}#${BLBLUE}#${BLMAGENTA}#${BLCYAN}#${BWHITE}#\n
${BBLACK}###BLACK##${BRED}####RED###${BGREEN}###GREEN##${BYELLOW}##YELLOW##${BBLUE}###BLUE###${BMAGENTA}##MAGENTA#${BCYAN}###CYAN###${BLGRAY}##LGRAY###\n${BGRAY}###GRAY###${BLRED}###LRED###${BLGREEN}##LGREEN##${BLYELLOW}#LYELLOW##${BLBLUE}##LBLUE###${BLMAGENTA}#LMAGENTA#${BLCYAN}##LCYAN###${BWHITE}##WHITE###"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

#env
#brew
#eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# Created by `pipx` on 2024-09-18 23:51:00
export PATH="$PATH:/home/siri/.local/bin"

#pywal
# Import colorscheme from 'wal' asynchronously
# &   # Run the process in the background.
# ( ) # Hide shell job control messages.
# Not supported in the "fish" shell.
#(cat ~/.cache/wal/sequences &)

# Alternative (blocks terminal for 0-3ms)
# cat ~/.cache/wal/sequences

# To add support for TTYs this line can be optionally added.
#source ~/.cache/wal/colors-tty.sh

# Prompt and colors
BLACK="\033[30m"
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"
MAGENTA="\033[35m"
CYAN="\033[36m"
LGRAY="\033[37m"
GRAY="\033[90m"
LRED="\033[91m"
LGREEN="\033[92m"
LYELLOW="\033[93m"
LBLUE="\033[94m"
LMAGENTA="\033[95m"
LCYAN="\033[96m"
WHITE="\033[97m"
ENDCOLOR="\033[0m"

BBLACK="\033[1;${BLACK}"
BRED="\033[1;${RED}"
BGREEN="\033[1;${GREEN}"
BYELLOW="\033[1;${YELLOW}"
BBLUE="\033[1;${BLUE}"
BMAGENTA="\033[1;${MAGENTA}"
BCYAN="\033[1;${CYAN}"
BLGRAY="\033[1;${LGRAY}"
BGRAY="\033[1;${GRAY}"
BLRED="\033[1;${LRED}"
BLGREEN="\033[1;${LGREEN}"
BLYELLOW="\033[1;${LYELLOW}"
BLBLUE="\033[1;${LBLUE}"
BLMAGENTA="\033[1;${LMAGENTA}"
BLCYAN="\033[1;${LCYAN}"
BWHITE="\033[1;${WHITE}"

# Prompt and color
PS1='\[\e[91;1m\]\u\[\e[94m\]@\[\e[92m\]\H\[\e[93m\]\w\[\e[91m\]:\[\e[94m\]\$\[\e[0m\] '

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Functions
# MOTD
motd(){
#echo -e "${BLYELLOW}This is some red text, ${ENDCOLOR}"
#echo -e "${BGREEN}And this is some green text${ENDCOLOR}"
echo ""
printf "${BLYELLOW}"
#echo "Hello $USER, today is $(date +"%A, %d %B %Y"). It is $(date +"%H:%M")"
echo "$(date +"%A, %d %B %Y"). It is $(date +"%H:%M")"
echo ""
printf "${BRED}"
curl wttr.in/LOCATION?format=2
printf "${BBLUE}"
echo ""
date +"%A,"| figlet -f script
printf "${BRED}"
date +"%d %B %Y"| figlet -f smscript
printf "${BLGRAY}"
echo ""
date +"%H:%M"| figlet -f smscript
echo ""
printf "${BMAGENTA}"
#date +"Welcome!"
source ~/rss
echo ""
printf "${RED}"
}

# Function that calls ls -AF after a cd
# to display the contents of the folder that was changed into
cd() {
    builtin cd "$@" && ls -AF
}

# Backup function that copies a given file and renames it to file-datetime.bu
bu () {
  # Check if a file is provided
  if [ -z "$1" ]; then
    echo "Usage: bu <file>"
    return 1
  fi

  # Backup the file
  cp "$1" "$(basename "$1")-$(date +%Y%m%d%H%M%S).bu"
  echo "Backup of $1 created"
}

# Search the filesystem dynamically and cd into shortest found directory
fz() {
  local dir
  dir=$(fd --type d --hidden \
           --exclude '.git' \
           --exclude 'node_modules' \
           --exclude '.cache' \
           --exclude '/mnt' \
           --exclude '/run' \
           --exclude '/proc' \
           --exclude '/sys' \
           --exclude '/dev' \
           --exclude '/home/siri/.config/konsave' \
           --exclude '/home/siri/Downloads/dotfiles-main' \
           . / 2>/dev/null \
    | fzf --filter="$*" --print-query \
          --extended-exact --height 40% --reverse \
          --preview 'tree -C {} | head -n 20' \
    | awk 'NR>1 {print length($0), $0}' | sort -n | cut -d" " -f2- \
    | head -1) \
    && cd "$dir"
}

#  Search the filesystem dynamically and show all options, unless there is only one
fzz() {
  local dir
  dir=$(fd --type d --hidden \
           --exclude '.git' \
           --exclude 'node_modules' \
           --exclude '.cache' \
           --exclude '/mnt' \
           --exclude '/run' \
           --exclude '/proc' \
           --exclude '/sys' \
           --exclude '/dev' \
           --exclude '/home/siri/.config/konsave' \
           --exclude '/home/siri/Downloads/dotfiles-main' \
           . / 2>/dev/null \
    | awk '{ print length, $0 }' | sort -n | cut -d' ' -f2- \
    | fzf --query="$*" --select-1 --exit-0 \
          --extended-exact --no-sort --height 40% --reverse \
          --preview 'tree -C {} | head -n 20') \
    && cd "$dir"
}

# Uncomment this to automatically connect to tmux on load
autoconnect_enabled=true;

# function to check for existiing tmux session and connect, or create a new one
tmux_auto_connect() {
    # Name prefix for sessions
    local session_prefix="main"

    # Check if any tmux sessions exist
    if tmux ls 2>/dev/null; then
        # Try to find a session without attachments
        local detached_session
        detached_session=$(tmux ls 2>/dev/null | grep -v "(attached)" | awk -F: '{print $1}' | head -n 1)

        if [ -n "$detached_session" ]; then
            # Attach to the first session without attachments
            tmux attach-session -t "$detached_session"
        else
            # All sessions are attached; create a new session with a sequential name
            local session_count
            session_count=$(tmux ls 2>/dev/null | wc -l)
            local new_session_name="${session_prefix}_$((session_count + 1))"
            tmux new-session -s "$new_session_name"
        fi
    else
        # No sessions exist; create the first session
        # tmux new-session -s "${session_prefix}_1"
        # If it is the first session, show motd
        tmux new-session -s "${session_prefix}_1" \; send-keys "source ~/.bashrc; clear; motd" C-m

    fi
}

if [ "$autoconnect_enabled" == "true" ]; then
    if [ -n "$PS1" ] && [ "$TERM" != "screen" ] && [ -z "$TMUX" ]; then
        tmux_auto_connect
    fi
else
    if [ -n "$PS1" ] && [ "$TERM" != "screen" ] && [ -z "$TMUX" ]; then
        motd
    fi
fi

#TERM=xterm-256color
# use hex colors in terminal
source ~/hexcolor
source ~/gamifier

# Find binary names installed by a package
fb() {
    pacman -Ql "$1" | awk '$2 ~ /(\/(usr\/local\/)?s?bin\/)/ && $2 !~ /(\/(usr\/local\/)?s?bin\/?)$/' | xargs -n1 basename
}
# Find binary names installed by a package and displays the path
fbp () {
    pacman -Ql "$1" | grep 'bin/'
}

# Find which package owns a file
whoowns() {
    pacman -Qo "$1"
}

# List files in a package
listfiles() {
    pacman -Ql "$1"
}

# Show description, size, deps of a package
pkginfo() {
    pacman -Si "$1"
}

# Show public IP address
myip() {
    curl -s https://ipinfo.io/ip
    echo
}

# Extract any archive
ex() {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2)   tar xjf "$1"   ;;
            *.tar.gz)    tar xzf "$1"   ;;
            *.tar.xz)    tar xf "$1"    ;;
            *.lzma)      unlzma "$1"    ;;
            *.bz2)       bunzip2 "$1"   ;;
            *.rar)       unrar x "$1"   ;;
            *.gz)        gunzip "$1"    ;;
            *.tar)       tar xf "$1"    ;;
            *.tbz2)      tar xjf "$1"   ;;
            *.tgz)       tar xzf "$1"   ;;
            *.zip)       unzip "$1"     ;;
            *.Z)         uncompress "$1";;
            *.7z)        7z x "$1"      ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# List all functions in .bashrc in original order
lf() {
  awk -v COL1="$LBLUE" -v COL2="$GRAY" -v ENDCOLOR="$ENDCOLOR" '
    /^\s*#/ { desc = $0; next }
    /^\s*(function\s+)?[a-zA-Z0-9_]+\s*\(\)\s*\{/ {
      if (desc) {
        name = $0
        sub(/^\s*function\s+/, "", name)
        sub(/\s*\(\)\s*\{.*/, "", name)
        gsub(/^\s*#\s*/, "", desc)  # remove leading comment markers
        printf "%s%-20s%s %s%s%s\n", COL1, name, ENDCOLOR, COL2, desc, ENDCOLOR
        desc = ""
      }
    }
  ' ~/.bashrc
}

# List all functions in .bashrc alphabetically
lfa() {
  grep -E '^\s*#|^\s*(function\s+)?[a-zA-Z0-9_]+\s*\(\)\s*\{' ~/.bashrc | \
    awk '
      /^\s*#/ { desc = $0; next }
      /^\s*(function\s+)?[a-zA-Z0-9_]+\s*\(\)\s*\{/ {
        if (desc) {
          name = $0
          sub(/^\s*function\s+/, "", name)
          sub(/\s*\(\)\s*\{.*/, "", name)
          gsub(/^\s*#\s*/, "", desc)
          print name "\t" desc
          desc = ""
        }
      }
    ' | sort | while IFS=$'\t' read -r name desc; do
      printf "${LBLUE}%-20s${ENDCOLOR} ${GRAY}%s${ENDCOLOR}\n" "$name" "$desc"
    done
}

# List orphaned packages
lo() {
local orphans
  orphans=$(pacman -Qtqd)

echo -e "${YELLOW}The following orphaned packages were found:${ENDCOLOR}"
  echo "$orphans" | while read -r pkg; do
    desc=$(pacman -Qi "$pkg" | awk -F': ' '/^Description/ { print $2 }')
    echo -e "  ${MAGENTA}$pkg${ENDCOLOR} - ${GRAY}$desc${ENDCOLOR}"
  done
}

# List all user installed packages
li() {
  echo -e "${YELLOW}Packages installed through pacman:${ENDCOLOR}"
  echo
  pacman -Qe
  echo
  echo -e "${YELLOW}Packages installed through AUR:${ENDCOLOR}"
  echo
  pacman -Qm
}

# List all user installed packages with descriptions
lid() {
  echo -e "${YELLOW}Packages installed through pacman:${ENDCOLOR}"
  echo
  pacman -Qe | while read -r pkg _; do
    desc=$(pacman -Si "$pkg" 2>/dev/null | awk -F': *' '/^Description/ {print $2}')
    printf "${GREEN}%-20s${ENDCOLOR} %s\n" "$pkg" "$desc"
  done

  echo
  echo -e "${YELLOW}Packages installed through AUR:${ENDCOLOR}"
  echo
  pacman -Qm | while read -r pkg _; do
    desc=$(pacman -Si "$pkg" 2>/dev/null | awk -F': *' '/^Description/ {print $2}')
    # Fallback: try yay -Si if pacman doesn't find the AUR package
    [[ -z "$desc" && $(command -v yay) ]] && desc=$(yay -Si "$pkg" 2>/dev/null | awk -F': *' '/^Description/ {print $2}')
    printf "${CYAN}%-20s${ENDCOLOR} %s\n" "$pkg" "$desc"
  done
}

