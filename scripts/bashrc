# General features
# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"


# History
# don't put duplicate lines or lines starting with space in the history.
export HISTCONTROL=ignoreboth
export HISTIGNORE=ls:ll:la:l:cd:pwd:exit:mc:su:df:clear:cls

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=100000
HISTFILESIZE=2000000

# Save and reload history after each command finishes
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"


# Aliases
# Detect distribution and set alias for package updates
if [ -f /etc/arch-release ]; then
    # Arch
    alias u='sudo pacman -Syu'
    alias i='sudo pacman -S '
    alias f='pacman -Ss '
    alias r='sudo pacman -Rs '
    alias rr='sudo pacman -Rns '
    alias c='sudo pacman -Sc'
    alias y='yay -S '
elif [ -f /etc/lsb-release ]; then
    # Debian
    alias u='sudo apt update && sudo apt upgrade'
    alias i='sudo apt install '
    alias f='apt search '
    alias r='sudo apt remove '
    alias rr='sudo apt purge '
    alias c='sudo apt autoremove && sudo apt clean'
else
    echo "Unsupported distribution or cannot detect distribution."
fi

alias ff='fastfetch'
alias h='history'
alias hg='history | grep '
alias con='lsof -i'

alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

alias please='sudo '
alias pls='sudo $(history -p !!)'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias showscheme='echo -e "${BBLACK}#${BRED}#${BGREEN}#${BYELLOW}#${BBLUE}#${BMAGENTA}#${BCYAN}#${BLGRAY}#\n${BGRAY}#${BLRED}#${BLGREEN}#${BLYELLOW}#${BLBLUE}#${BLMAGENTA}#${BLCYAN}#${BWHITE}#\n
${BBLACK}###BLACK##${BRED}####RED###${BGREEN}###GREEN##${BYELLOW}##YELLOW##${BBLUE}###BLUE###${BMAGENTA}##MAGENTA#${BCYAN}###CYAN###${BLGRAY}##LGRAY###\n${BGRAY}###GRAY###${BLRED}###LRED###${BLGREEN}##LGREEN##${BLYELLOW}#LYELLOW##${BLBLUE}##LBLUE###${BLMAGENTA}#LMAGENTA#${BLCYAN}##LCYAN###${BWHITE}##WHITE###"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi


#env
#brew
#eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# Created by `pipx` on 2024-09-18 23:51:00
#export PATH="$PATH:/home/siri/.local/bin"

#pywal
# Import colorscheme from 'wal' asynchronously
# &   # Run the process in the background.
# ( ) # Hide shell job control messages.
# Not supported in the "fish" shell.
(cat ~/.cache/wal/sequences &)

# Alternative (blocks terminal for 0-3ms)
# cat ~/.cache/wal/sequences

# To add support for TTYs this line can be optionally added.
source ~/.cache/wal/colors-tty.sh


# Prompt and colors
BLACK="\e[30m"
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
MAGENTA="\e[35m"
CYAN="\e[36m"
LGRAY="\e[37m"
GRAY="\e[90m"
LRED="\e[91m"
LGREEN="\e[92m"
LYELLOW="\e[93m"
LBLUE="\e[94m"
LMAGENTA="\e[95m"
LCYAN="\e[96m"
WHITE="\e[97m"
ENDCOLOR="\e[0m"

BBLACK="\e[1;${BLACK}"
BRED="\e[1;${RED}"
BGREEN="\e[1;${GREEN}"
BYELLOW="\e[1;${YELLOW}"
BBLUE="\e[1;${BLUE}"
BMAGENTA="\e[1;${MAGENTA}"
BCYAN="\e[1;${CYAN}"
BLGRAY="\e[1;${LGRAY}"
BGRAY="\e[1;${GRAY}"
BLRED="\e[1;${LRED}"
BLGREEN="\e[1;${LGREEN}"
BLYELLOW="\e[1;${LYELLOW}"
BLBLUE="\e[1;${LBLUE}"
BLMAGENTA="\e[1;${LMAGENTA}"
BLCYAN="\e[1;${LCYAN}"
BWHITE="\e[1;${WHITE}"

# Prompt and color
PS1='\[\e[91;1m\]\u\[\e[94m\]@\[\e[92m\]\H\[\e[93m\]\w\[\e[91m\]:\[\e[94m\]\$\[\e[0m\] '

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'


# MOTD
#echo -e "${BLYELLOW}This is some red text, ${ENDCOLOR}"
#echo -e "${BGREEN}And this is some green text${ENDCOLOR}"
echo ""
printf "${BLYELLOW}"
#echo "Hello $USER, today is $(date +"%A, %d %B %Y"). It is $(date +"%H:%M")"
echo "$(date +"%A, %d %B %Y"). It is $(date +"%H:%M")"
echo ""
printf "${BRED}"
#inxi
#notify-send "Hello $USER, today is $(date +"%A, %d %B %Y"). It is $(date +"%H:%M")"
printf "${BBLUE}"
echo ""
date +"%A,"| figlet -f script
printf "${BRED}"
date +"%d %B %Y"| figlet -f smscript
printf "${BLGRAY}"
date +"%H:%M"| figlet -f smscript
echo ""
printf "${BMAGENTA}"
date +"Welcome!"
echo ""
printf "${RED}"

# Functions
# Function that calls ls -lA after a cd
# to display the contents of the folder that was changed into
cd() {
    builtin cd "$@" && ls -lA
}

# Backup function that copies a given file and renames it to file-datetime.bu
bu () {
  # Check if a file is provided
  if [ -z "$1" ]; then
    echo "Usage: bu <file>"
    return 1
  fi

  # Backup the file
  cp "$1" "$(basename "$1")-$(date +%Y%m%d%H%M%S).bu"
  echo "Backup of $1 created"
}

# Uncomment this to automatically connect to tmux on load
autoconnect_enabled=true;

#function to check for existiing tmux session and connect, or create a new one
tmux_auto_connect() {
    # Name prefix for sessions
    local session_prefix="main"

    # Check if any tmux sessions exist
    if tmux ls 2>/dev/null; then
        # Try to find a session without attachments
        local detached_session
        detached_session=$(tmux ls 2>/dev/null | grep -v "(attached)" | awk -F: '{print $1}' | head -n 1)

        if [ -n "$detached_session" ]; then
            # Attach to the first session without attachments
            tmux attach-session -t "$detached_session"
        else
            # All sessions are attached; create a new session with a sequential name
            local session_count
            session_count=$(tmux ls 2>/dev/null | wc -l)
            local new_session_name="${session_prefix}_$((session_count + 1))"
            tmux new-session -s "$new_session_name"
        fi
    else
        # No sessions exist; create the first session
        tmux new-session -s "${session_prefix}_1"
    fi
}

# Automatically run tmux_auto_connect when starting a new terminal
if [ -n "$PS1" ] && [ "$TERM" != "screen" ] && [ -z "$TMUX" ] && [ $autoconnect_enabled ]; then
    tmux_auto_connect
fi
